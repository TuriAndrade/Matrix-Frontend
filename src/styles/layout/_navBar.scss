.navBar {
  display: grid;
  background-color: $colorWhite;
  width: 100%;
  height: 6.5rem;
  justify-content: center;
  align-items: center;
  justify-items: start;
  padding: 0 4rem;
  grid-template-columns:
    [c-logo-start] minmax(max-content, 5rem)
    [c-logo-end c-gap-start] minmax(0, 30%) [c-gap-end] repeat(auto-fit, [c-item-start]
        minmax(max-content, 5rem) [c-item-end]);
  column-gap: 4rem;
  grid-template-rows: 1fr;
  border-bottom: 1px solid $colorGreyLight;

  /*
      I can't use only max-content on c-logo-start and in the repeat function
      because of auto-fit. You can't do that. So I'm using the minmax function
      with a min value (max-content) that almost always will be greater than the
      max value and I'll get the result I want
    */

  @include respond(tabLand) {
    column-gap: 2rem;
  }

  @include respond(tabPort) {
    padding: 0;
    justify-items: center;
    justify-content: start;
    grid-template-columns:
      [c-left-start] minmax(0, 2rem)
      [c-left-end c-menu-start] max-content [c-menu-end c-logo-start] minmax(
        max-content,
        1fr
      )
      [c-logo-end c-right-start] minmax(0, 2rem) [c-right-end];
  }

  &__menuBtn {
    grid-row: 1 / -1;
    grid-column: c-menu-start / c-menu-end;
    height: 4rem;
    width: 4rem;
    background: transparent;
    position: relative;
    display: none;

    @include respond(tabPort) {
      display: flex;
    }

    &::after,
    &::before {
      content: "";
      position: absolute;
      left: 0;
      top: 50%;
      height: 2px;
      background-color: $colorBlack;
      border-radius: 100rem;
      transform-origin: center;
    }

    &::before {
      width: 2.5rem;
      transform: translate(0, calc(-50% - 0.7rem));
    }

    &::after {
      width: 4rem;
      transform: translate(0, calc(-50% + 0.7rem));
    }

    &-enter {
      &::after,
      &::before {
        left: 0;
      }

      &::before {
        width: 2.5rem;
        transform: translate(0, calc(-50% - 0.7rem));
      }

      &::after {
        width: 4rem;
        transform: translate(0, calc(-50% + 0.7rem));
      }
    }

    &-enter-active {
      &::after,
      &::before {
        left: 50%;
        width: 3.25rem;
        transition: all 0.3s;
      }

      &::after {
        transform: translate(-50%, -50%) rotateZ(45deg);
      }

      &::before {
        transform: translate(-50%, -50%) rotateZ(-45deg);
      }
    }

    &-enter-done,
    &-exit {
      &::after,
      &::before {
        left: 50%;
        width: 3.25rem;
      }

      &::after {
        transform: translate(-50%, -50%) rotateZ(45deg);
      }

      &::before {
        transform: translate(-50%, -50%) rotateZ(-45deg);
      }
    }

    &-exit-active {
      &::after,
      &::before {
        left: 0;
      }

      &::before {
        width: 2.5rem;
        transform: translate(0, calc(-50% - 0.7rem));
        transition: all 0.3s;
      }

      &::after {
        width: 4rem;
        transform: translate(0, calc(-50% + 0.7rem));
        transition: all 0.3s;
      }
    }
  }

  &__logo {
    cursor: pointer;
    text-decoration: none;
    grid-row: 1 / -1;
    grid-column: c-logo-start / c-logo-end;
    display: flex;
    align-items: center;
    gap: 2rem;

    img {
      height: 3rem;
    }

    p {
      font-weight: 600;
      letter-spacing: 1.5px;
      font-size: 2rem;
      color: $colorBlack;
    }
  }

  &__gap {
    grid-row: 1 / -1;
    grid-column: c-gap-start / c-gap-end;

    @include respond(tabPort) {
      display: none;
    }
  }

  &__item {
    grid-row: 1 / -1;

    @include respond(tabPort) {
      display: none;
    }
  }

  &__dropdown {
    @include respond(tabPort) {
      display: none;
    }
  }
}
